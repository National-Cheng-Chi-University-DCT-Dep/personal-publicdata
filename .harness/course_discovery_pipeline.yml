pipeline:
  name: Course Discovery Pipeline
  identifier: course_discovery
  projectIdentifier: master_application
  orgIdentifier: default
  tags:
    discovery: "true"
    automation: "true"
  
  properties:
    ci:
      codebase:
        connectorRef: github_connector
        repoName: personal-publicdata
        build: <+input>
  
  stages:
    - stage:
        name: Course Discovery Complete Flow
        identifier: course_discovery_flow
        description: Complete course discovery, filter, and update pipeline
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Setup Environment
                  identifier: setup_env
                  spec:
                    shell: Bash
                    command: |
                      #!/bin/bash
                      set -e
                      
                      echo "=== Installing Dependencies ==="
                      pip install -r requirements.txt
                      playwright install chromium
                      
                      echo "=== Creating Required Directories ==="
                      mkdir -p discovery/raw_data
                      mkdir -p logs
                  timeout: 15m
              
              - step:
                  type: Run
                  name: Scrape Mastersportal
                  identifier: scrape_mastersportal
                  spec:
                    shell: Bash
                    command: |
                      #!/bin/bash
                      set -e
                      
                      echo "=== Scraping Mastersportal.com ==="
                      python -c "
                      import yaml
                      profile = yaml.safe_load(open('source_data/my_profile.yml'))
                      keywords = profile['academic_interests']['primary'] + profile['academic_interests']['secondary']
                      countries = profile['geographic_preferences']['preferred_countries']
                      
                      from discovery.scrape_mastersportal import MastersPortalScraper
                      scraper = MastersPortalScraper(keywords[:3], countries[:4])
                      courses = scraper.run()
                      print(f'Found {len(courses)} courses from Mastersportal')
                      "
                  timeout: 30m
              
              - step:
                  type: Run
                  name: Scrape Study.eu
                  identifier: scrape_studyeu
                  spec:
                    shell: Bash
                    command: |
                      #!/bin/bash
                      set -e
                      
                      echo "=== Scraping Study.eu ==="
                      python -c "
                      import yaml
                      profile = yaml.safe_load(open('source_data/my_profile.yml'))
                      keywords = profile['academic_interests']['primary']
                      
                      from discovery.scrape_studyeu import StudyEuScraper
                      scraper = StudyEuScraper(keywords[:3])
                      courses = scraper.run()
                      print(f'Found {len(courses)} courses from Study.eu')
                      "
                  timeout: 20m
              
              - step:
                  type: Run
                  name: Filter and Validate
                  identifier: filter_validate
                  spec:
                    shell: Bash
                    command: |
                      #!/bin/bash
                      set -e
                      
                      echo "=== Filtering courses ==="
                      python discovery/filter_and_validate.py
                      
                      echo "=== Checking generated files ==="
                      ls -lh discovery/
                  timeout: 10m
              
              - step:
                  type: Run
                  name: Update Database and Create PR
                  identifier: update_db
                  spec:
                    shell: Bash
                    command: |
                      #!/bin/bash
                      set -e
                      
                      echo "=== Updating database ==="
                      python discovery/update_database.py
                      
                      echo "Discovery report generated at discovery/discovery_report.md"
                  timeout: 10m
              
              - step:
                  type: Run
                  name: Notify Results
                  identifier: notify
                  spec:
                    shell: Bash
                    command: |
                      #!/bin/bash
                      
                      if [ -f "discovery/discovery_report.md" ]; then
                        echo "✅ Discovery report available"
                        cat discovery/discovery_report.md
                        # 可以在這裡加入通知邏輯
                      else
                        echo "⚠️ No discovery report found"
                      fi
                    envVariables:
                      NOTIFICATION_WEBHOOK: <+secrets.getValue("notification_webhook")>
                  timeout: 5m
        tags: {}
  
  triggers:
    - trigger:
        name: Weekly Discovery
        identifier: weekly_discovery
        enabled: true
        description: Run every Monday for course discovery
        type: Cron
        spec:
          type: Cron
          spec:
            expression: "0 0 * * 1"  # Every Monday at midnight UTC
            inputYaml: |
              pipeline:
                identifier: course_discovery


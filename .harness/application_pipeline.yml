pipeline:
  name: University Application Document Generator
  identifier: university_application_docs
  projectIdentifier: personal_publicdata
  orgIdentifier: default
  tags: {}
  
  properties:
    ci:
      codebase:
        connectorRef: github_connector
        repoName: personal-publicdata
        build: <+input>

  stages:
    - stage:
        name: Build Application Documents
        identifier: build_docs
        description: Generate customized CV and SOP documents
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Setup Python Environment
                  identifier: setup_python
                  spec:
                    shell: Bash
                    command: |
                      echo "Setting up Python environment..."
                      python3 --version
                      pip3 --version
                      
                      # Install dependencies
                      cd build_scripts
                      pip3 install -r requirements.txt
                      
              - step:
                  type: Run
                  name: Validate Configuration
                  identifier: validate_config
                  spec:
                    shell: Bash
                    command: |
                      echo "Validating YAML configuration files..."
                      cd build_scripts
                      
                      # Check if schools.yml is valid
                      python3 -c "import yaml; yaml.safe_load(open('../source_data/schools.yml'))"
                      echo "✅ schools.yml is valid"
                      
                      # Check if recommenders.yml is valid
                      python3 -c "import yaml; yaml.safe_load(open('../source_data/recommenders.yml'))"
                      echo "✅ recommenders.yml is valid"
                      
                      # List available schools
                      python3 generate_docs.py --list
                      
              - step:
                  type: Run
                  name: Generate Documents for Modified Schools
                  identifier: generate_docs
                  spec:
                    shell: Bash
                    command: |
                      echo "Generating application documents..."
                      cd build_scripts
                      
                      # Check if specific school was modified (based on git changes)
                      if git diff --name-only HEAD~1 | grep -q "source_data/schools.yml"; then
                        echo "Schools configuration was modified, generating all active schools..."
                        python3 generate_docs.py --all
                      else
                        echo "No school configuration changes detected"
                        # For manual triggers, generate all active schools
                        python3 generate_docs.py --all
                      fi
                      
              - step:
                  type: Run
                  name: Organize Output Files
                  identifier: organize_files
                  spec:
                    shell: Bash
                    command: |
                      echo "Organizing generated files..."
                      
                      # Create a summary of generated files
                      find final_applications -name "*.md" -type f | while read file; do
                        echo "Generated: $file ($(wc -l < "$file") lines)"
                      done
                      
                      # Create a manifest file
                      cat > final_applications/MANIFEST.txt << EOF
                      Generated on: $(date)
                      Commit: $(git rev-parse --short HEAD)
                      Branch: $(git rev-parse --abbrev-ref HEAD)
                      
                      Files generated:
                      EOF
                      
                      find final_applications -name "*.md" -type f >> final_applications/MANIFEST.txt
                      
              - step:
                  type: SaveCacheS3
                  name: Cache Generated Documents
                  identifier: save_cache
                  spec:
                    connectorRef: aws_connector
                    region: us-east-1
                    bucket: harness-artifacts
                    key: application-docs/<+pipeline.sequenceId>
                    sourcePaths:
                      - final_applications/
                    archiveFormat: Tar

  triggers:
    - trigger:
        name: Source Data Changes
        identifier: source_data_trigger
        enabled: true
        description: Trigger when source_data directory is modified
        type: Webhook
        spec:
          type: Github
          spec:
            type: PullRequest
            spec:
              connectorRef: github_connector
              autoAbortPreviousExecutions: false
              payloadConditions:
                - key: changedFiles
                  operator: Contains
                  value: source_data/
              headerConditions: []
              actions:
                - opened
                - synchronize
                - reopened

    - trigger:
        name: Manual Template Updates
        identifier: manual_trigger
        enabled: true
        description: Manual trigger for template updates
        type: Manual
        spec: {}

  variables:
    - name: python_version
      type: String
      description: Python version to use
      value: "3.9"
    - name: generate_pdf
      type: String
      description: Whether to generate PDF files
      value: "false"
    - name: target_schools
      type: String
      description: Specific schools to generate (comma-separated school_ids)
      value: "all"

  notificationRules:
    - name: Pipeline Success Notification
      identifier: success_notification
      pipelineEvents:
        - type: PipelineSuccess
      notificationMethod:
        type: Email
        spec:
          userGroups: []
          recipients:
            - admin@dennisleehappy.org
      enabled: true
    
    - name: Pipeline Failure Notification
      identifier: failure_notification
      pipelineEvents:
        - type: PipelineFailed
      notificationMethod:
        type: Email
        spec:
          userGroups: []
          recipients:
            - admin@dennisleehappy.org
      enabled: true
